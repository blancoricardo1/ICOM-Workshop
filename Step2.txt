// Step 2: Smoothing the signal

// First, define these variables near your sensorPin declaration

#define SAMP_SIZ 8

float readings[SAMP_SIZ] = {0};
int ptr = 0;
float sum = 0;

// Next, copy and paste the following function

float smoothSignal() {
  // Duration of the sampling window in milliseconds
  const int SAMP_WINDOW_MS = 20;

  // Variables to keep track of the number of samples and their total
  int count = 0;
  float total = 0.0;
  // Record the start time of the sampling window
  unsigned long start = millis();
  // Sample the sensor repeatedly for 20ms
  while (millis() - start < SAMP_WINDOW_MS) {
    total += readSensor(); // Read from the sensor and add to total
    count++;               // Increment number of readings taken
  }
  // Compute the average of all samples taken in the 20ms window
  float avgSample = total / count;
  // ---- Moving Average Smoothing ----
  // Subtract the oldest sample from the running sum
  sum -= readings[ptr];
  // Add the new average sample to the running sum
  sum += avgSample;
  // Store the new sample in the circular buffer
  readings[ptr] = avgSample;
  // Advance the circular buffer pointer (wrap around if needed)
  ptr = (ptr + 1) % SAMP_SIZ;
  // Return the average of the last SAMP_SIZ samples (moving average)
  return sum / SAMP_SIZ;
}

// Then, call this function into your loop. Do it yourself ;)

// HINT: Variable "raw" is now unused, you can remove it from your loop entirely. 
// Declare a new variable named smooth, assign the result of smoothSignal() to it, 
// and pass it to plotData().
